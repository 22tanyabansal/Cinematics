{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Downloads\\\\React-Movie-App-main\\\\React-Movie-App-main\\\\src\\\\pages\\\\TvSeries\\\\TvSeries.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Pagination from \"../../components/Pagination/Pagination\";\nimport LocalSearch from \"../../components/Search/LocalSearch\";\nimport SingleData from \"../../components/SingleData/SingleData\";\nimport Myloader from \"react-spinners/PuffLoader\";\nimport Genre from \"../../components/Genres/Genre\";\nimport useGenre from \"../../components/Genres/UseGenre\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TvSeries = () => {\n  _s();\n\n  const [treadingContent, setTreadingContent] = useState([]);\n  const [page, setPage] = useState(1);\n  const [numOfPages, setNumOfPages] = useState();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [filterGenre, setFilterGenre] = useState([]);\n  const genreforURL = useGenre(filterGenre);\n  const [genreTitle, setGenreTitle] = useState(); // eslint-disable-next-line\n\n  const [color, setColor] = useState(\"grey\");\n\n  const fetchMovieApi = async () => {\n    try {\n      const {\n        data\n      } = await axios.get(` \n        https://api.themoviedb.org/3/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&page=${page}&sort_by=popularity.desc&with_genres=${genreforURL}\n        `);\n      setTreadingContent(data.results);\n      setIsLoading(true);\n      setNumOfPages(100); // eslint-disable-next-line\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const fetchSearchApi = async () => {\n    if (searchTerm) {\n      const SEARCH_API = `https://api.themoviedb.org/3/search/tv?api_key=${process.env.REACT_APP_API_KEY}&query=${searchTerm}&page=${page}&sort_by=popularity.desc`;\n      const {\n        data\n      } = await axios.get(SEARCH_API);\n      setTreadingContent(data.results);\n      setNumOfPages(data.total_pages);\n      setIsLoading(true);\n    }\n  };\n\n  useEffect(() => {\n    window.scroll(0, 0);\n\n    if (searchTerm) {\n      fetchSearchApi();\n    } else {\n      fetchMovieApi();\n    }\n\n    return () => {\n      setTreadingContent(); //clean up\n    }; // eslint-disable-next-line\n  }, [page, isLoading, genreforURL]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"all__series\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my__main\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"TreadingHome\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\" \", genreTitle && genreTitle.name, \" TV series:\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LocalSearch, {\n          setSearchTerm: setSearchTerm,\n          searchTerm: searchTerm,\n          fetchSearchApi: fetchSearchApi,\n          numOfpages: numOfPages,\n          media: \"series\",\n          placehold: \"Search Tv Series\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sec__main \",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"all__genres \",\n          children: /*#__PURE__*/_jsxDEV(Genre, {\n            media: \"tv\",\n            setFilterGenre: setFilterGenre,\n            filterGenre: filterGenre,\n            setTreadingContent: setTreadingContent,\n            setPage: setPage,\n            numOfpages: numOfPages,\n            page: page,\n            setGenreTitle: setGenreTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pag  \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ListContent\",\n        children: isLoading && treadingContent ? treadingContent.map(n => /*#__PURE__*/_jsxDEV(SingleData, { ...n,\n          mediaType: \"tv\"\n        }, n.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading\",\n          style: {\n            display: \"flex\",\n            height: \"450px\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Myloader, {\n            color: color,\n            size: 60\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"grey\",\n              fontSize: \"13px\",\n              marginLeft: \"10px\",\n              marginTop: \"10px\"\n            },\n            children: \"fetching data ...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), numOfPages > 1 && /*#__PURE__*/_jsxDEV(Pagination, {\n        setPage: setPage,\n        numOfPages: numOfPages,\n        media: \"series\",\n        page: page,\n        searchTerm: searchTerm,\n        setIsLoading: setIsLoading,\n        style: {\n          marginBottom: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(TvSeries, \"ixIeDcrQ3Ggxi8N9sgVKNoIP4ho=\", false, function () {\n  return [useGenre];\n});\n\n_c = TvSeries;\nexport default TvSeries;\n\nvar _c;\n\n$RefreshReg$(_c, \"TvSeries\");","map":{"version":3,"sources":["C:/Users/Dell/Downloads/React-Movie-App-main/React-Movie-App-main/src/pages/TvSeries/TvSeries.jsx"],"names":["axios","useEffect","useState","Pagination","LocalSearch","SingleData","Myloader","Genre","useGenre","TvSeries","treadingContent","setTreadingContent","page","setPage","numOfPages","setNumOfPages","searchTerm","setSearchTerm","isLoading","setIsLoading","filterGenre","setFilterGenre","genreforURL","genreTitle","setGenreTitle","color","setColor","fetchMovieApi","data","get","process","env","REACT_APP_API_KEY","results","error","console","fetchSearchApi","SEARCH_API","total_pages","window","scroll","name","map","n","id","display","height","justifyContent","alignItems","fontSize","marginLeft","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Pagination from \"../../components/Pagination/Pagination\";\nimport LocalSearch from \"../../components/Search/LocalSearch\";\nimport SingleData from \"../../components/SingleData/SingleData\";\nimport Myloader from \"react-spinners/PuffLoader\";\nimport Genre from \"../../components/Genres/Genre\";\nimport useGenre from \"../../components/Genres/UseGenre\";\n\nconst TvSeries = () => {\n  const [treadingContent, setTreadingContent] = useState([]);\n  const [page, setPage] = useState(1);\n  const [numOfPages, setNumOfPages] = useState();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [filterGenre, setFilterGenre] = useState([]);\n  const genreforURL = useGenre(filterGenre);\n  const [genreTitle, setGenreTitle] = useState();\n  // eslint-disable-next-line\n  const [color, setColor] = useState(\"grey\");\n\n  const fetchMovieApi = async () => {\n    try {\n      const { data } = await axios.get(\n        ` \n        https://api.themoviedb.org/3/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&page=${page}&sort_by=popularity.desc&with_genres=${genreforURL}\n        `\n      );\n      setTreadingContent(data.results);\n      setIsLoading(true);\n      setNumOfPages(100);\n\n      // eslint-disable-next-line\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const fetchSearchApi = async () => {\n    if (searchTerm) {\n      const SEARCH_API = `https://api.themoviedb.org/3/search/tv?api_key=${process.env.REACT_APP_API_KEY}&query=${searchTerm}&page=${page}&sort_by=popularity.desc`;\n      const { data } = await axios.get(SEARCH_API);\n      setTreadingContent(data.results);\n      setNumOfPages(data.total_pages);\n      setIsLoading(true);\n    }\n  };\n\n  useEffect(() => {\n    window.scroll(0, 0);\n\n    if (searchTerm) {\n      fetchSearchApi();\n    } else {\n      fetchMovieApi();\n    }\n    return () => {\n      setTreadingContent(); //clean up\n    };\n    // eslint-disable-next-line\n  }, [page, isLoading, genreforURL]);\n\n  return (\n    <>\n      <main className=\"all__series\">\n        <div className=\"my__main\">\n          <div className=\"TreadingHome\">\n            <h3> {genreTitle && genreTitle.name} TV series:</h3>\n          </div>\n          <LocalSearch\n            setSearchTerm={setSearchTerm}\n            searchTerm={searchTerm}\n            fetchSearchApi={fetchSearchApi}\n            numOfpages={numOfPages}\n            media=\"series\"\n            placehold=\"Search Tv Series\"\n          />\n        </div>\n        <div className=\"sec__main \">\n          <span className=\"all__genres \">\n            <Genre\n              media=\"tv\"\n              setFilterGenre={setFilterGenre}\n              filterGenre={filterGenre}\n              setTreadingContent={setTreadingContent}\n              setPage={setPage}\n              numOfpages={numOfPages}\n              page={page}\n              setGenreTitle={setGenreTitle}\n            />\n          </span>\n          <div className=\"pag  \">\n            {/* <Pagination\n              setPage={setPage}\n              numOfPages={numOfPages}\n              media=\"series\"\n              page={page}\n              setIsLoading={setIsLoading}\n              searchTerm={searchTerm}\n              style={{ marginBottom: \"10px\" }}\n            /> */}\n          </div>\n        </div>\n\n        <div className=\"ListContent\">\n          {isLoading && treadingContent ? (\n            treadingContent.map((n) => (\n              <SingleData key={n.id} {...n} mediaType=\"tv\" />\n            ))\n          ) : (\n            <div\n              className=\"loading\"\n              style={{\n                display: \"flex\",\n                height: \"450px\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <Myloader color={color} size={60} />\n              <p\n                style={{\n                  color: \"grey\",\n                  fontSize: \"13px\",\n                  marginLeft: \"10px\",\n                  marginTop: \"10px\",\n                }}\n              >\n                fetching data ...\n              </p>\n            </div>\n          )}\n        </div>\n\n        {numOfPages > 1 && (\n          <Pagination\n            setPage={setPage}\n            numOfPages={numOfPages}\n            media=\"series\"\n            page={page}\n            searchTerm={searchTerm}\n            setIsLoading={setIsLoading}\n            style={{ marginBottom: \"10px\" }}\n          />\n        )}\n      </main>\n    </>\n  );\n};\n\nexport default TvSeries;\n"]},"metadata":{},"sourceType":"module"}