{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Downloads\\\\React-Movie-App-main\\\\React-Movie-App-main\\\\src\\\\pages\\\\TvSeries\\\\TvSeries.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Pagination from \"../../components/Pagination/Pagination\";\nimport LocalSearch from \"../../components/Search/LocalSearch\";\nimport SingleData from \"../../components/SingleData/SingleData\";\nimport Myloader from \"react-spinners/PuffLoader\";\nimport Genre from \"../../components/Genres/Genre\";\nimport useGenre from \"../../components/Genres/UseGenre\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TvSeries = () => {\n  _s();\n  const [treadingContent, setTreadingContent] = useState([]);\n  const [page, setPage] = useState(1);\n  const [numOfPages, setNumOfPages] = useState();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [filterGenre, setFilterGenre] = useState([]);\n  const genreforURL = useGenre(filterGenre);\n  const [genreTitle, setGenreTitle] = useState();\n  // eslint-disable-next-line\n  const [color, setColor] = useState(\"grey\");\n  const fetchMovieApi = async () => {\n    try {\n      const {\n        data\n      } = await axios.get(` \n        https://api.themoviedb.org/3/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&page=${page}&sort_by=popularity.desc&with_genres=${genreforURL}\n        `);\n      setTreadingContent(data.results);\n      setIsLoading(true);\n      setNumOfPages(100);\n\n      // eslint-disable-next-line\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const fetchSearchApi = async () => {\n    if (searchTerm) {\n      const SEARCH_API = `https://api.themoviedb.org/3/search/tv?api_key=${process.env.REACT_APP_API_KEY}&query=${searchTerm}&page=${page}&sort_by=popularity.desc`;\n      const {\n        data\n      } = await axios.get(SEARCH_API);\n      setTreadingContent(data.results);\n      setNumOfPages(data.total_pages);\n      setIsLoading(true);\n    }\n  };\n  useEffect(() => {\n    window.scroll(0, 0);\n    if (searchTerm) {\n      fetchSearchApi();\n    } else {\n      fetchMovieApi();\n    }\n    return () => {\n      setTreadingContent(); //clean up\n    };\n    // eslint-disable-next-line\n  }, [page, isLoading, genreforURL]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"all__series\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my__main\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"TreadingHome\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\" \", genreTitle && genreTitle.name, \" TV series:\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LocalSearch, {\n          setSearchTerm: setSearchTerm,\n          searchTerm: searchTerm,\n          fetchSearchApi: fetchSearchApi,\n          numOfpages: numOfPages,\n          media: \"series\",\n          placehold: \"Search Tv Series\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sec__main \",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"all__genres \",\n          children: /*#__PURE__*/_jsxDEV(Genre, {\n            media: \"tv\",\n            setFilterGenre: setFilterGenre,\n            filterGenre: filterGenre,\n            setTreadingContent: setTreadingContent,\n            setPage: setPage,\n            numOfpages: numOfPages,\n            page: page,\n            setGenreTitle: setGenreTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pag  \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ListContent\",\n        children: isLoading && treadingContent ? treadingContent.map(n => /*#__PURE__*/_jsxDEV(SingleData, {\n          ...n,\n          mediaType: \"tv\"\n        }, n.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading\",\n          style: {\n            display: \"flex\",\n            height: \"450px\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Myloader, {\n            color: color,\n            size: 60\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"grey\",\n              fontSize: \"13px\",\n              marginLeft: \"10px\",\n              marginTop: \"10px\"\n            },\n            children: \"fetching data ...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), numOfPages > 1 && /*#__PURE__*/_jsxDEV(Pagination, {\n        setPage: setPage,\n        numOfPages: numOfPages,\n        media: \"series\",\n        page: page,\n        searchTerm: searchTerm,\n        setIsLoading: setIsLoading,\n        style: {\n          marginBottom: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(TvSeries, \"ixIeDcrQ3Ggxi8N9sgVKNoIP4ho=\", false, function () {\n  return [useGenre];\n});\n_c = TvSeries;\nexport default TvSeries;\nvar _c;\n$RefreshReg$(_c, \"TvSeries\");","map":{"version":3,"names":["axios","useEffect","useState","Pagination","LocalSearch","SingleData","Myloader","Genre","useGenre","TvSeries","treadingContent","setTreadingContent","page","setPage","numOfPages","setNumOfPages","searchTerm","setSearchTerm","isLoading","setIsLoading","filterGenre","setFilterGenre","genreforURL","genreTitle","setGenreTitle","color","setColor","fetchMovieApi","data","get","process","env","REACT_APP_API_KEY","results","error","console","fetchSearchApi","SEARCH_API","total_pages","window","scroll","name","map","n","id","display","height","justifyContent","alignItems","fontSize","marginLeft","marginTop","marginBottom"],"sources":["C:/Users/Dell/Downloads/React-Movie-App-main/React-Movie-App-main/src/pages/TvSeries/TvSeries.jsx"],"sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Pagination from \"../../components/Pagination/Pagination\";\nimport LocalSearch from \"../../components/Search/LocalSearch\";\nimport SingleData from \"../../components/SingleData/SingleData\";\nimport Myloader from \"react-spinners/PuffLoader\";\nimport Genre from \"../../components/Genres/Genre\";\nimport useGenre from \"../../components/Genres/UseGenre\";\n\nconst TvSeries = () => {\n  const [treadingContent, setTreadingContent] = useState([]);\n  const [page, setPage] = useState(1);\n  const [numOfPages, setNumOfPages] = useState();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [filterGenre, setFilterGenre] = useState([]);\n  const genreforURL = useGenre(filterGenre);\n  const [genreTitle, setGenreTitle] = useState();\n  // eslint-disable-next-line\n  const [color, setColor] = useState(\"grey\");\n\n  const fetchMovieApi = async () => {\n    try {\n      const { data } = await axios.get(\n        ` \n        https://api.themoviedb.org/3/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&page=${page}&sort_by=popularity.desc&with_genres=${genreforURL}\n        `\n      );\n      setTreadingContent(data.results);\n      setIsLoading(true);\n      setNumOfPages(100);\n\n      // eslint-disable-next-line\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const fetchSearchApi = async () => {\n    if (searchTerm) {\n      const SEARCH_API = `https://api.themoviedb.org/3/search/tv?api_key=${process.env.REACT_APP_API_KEY}&query=${searchTerm}&page=${page}&sort_by=popularity.desc`;\n      const { data } = await axios.get(SEARCH_API);\n      setTreadingContent(data.results);\n      setNumOfPages(data.total_pages);\n      setIsLoading(true);\n    }\n  };\n\n  useEffect(() => {\n    window.scroll(0, 0);\n\n    if (searchTerm) {\n      fetchSearchApi();\n    } else {\n      fetchMovieApi();\n    }\n    return () => {\n      setTreadingContent(); //clean up\n    };\n    // eslint-disable-next-line\n  }, [page, isLoading, genreforURL]);\n\n  return (\n    <>\n      <main className=\"all__series\">\n        <div className=\"my__main\">\n          <div className=\"TreadingHome\">\n            <h3> {genreTitle && genreTitle.name} TV series:</h3>\n          </div>\n          <LocalSearch\n            setSearchTerm={setSearchTerm}\n            searchTerm={searchTerm}\n            fetchSearchApi={fetchSearchApi}\n            numOfpages={numOfPages}\n            media=\"series\"\n            placehold=\"Search Tv Series\"\n          />\n        </div>\n        <div className=\"sec__main \">\n          <span className=\"all__genres \">\n            <Genre\n              media=\"tv\"\n              setFilterGenre={setFilterGenre}\n              filterGenre={filterGenre}\n              setTreadingContent={setTreadingContent}\n              setPage={setPage}\n              numOfpages={numOfPages}\n              page={page}\n              setGenreTitle={setGenreTitle}\n            />\n          </span>\n          <div className=\"pag  \">\n            {/* <Pagination\n              setPage={setPage}\n              numOfPages={numOfPages}\n              media=\"series\"\n              page={page}\n              setIsLoading={setIsLoading}\n              searchTerm={searchTerm}\n              style={{ marginBottom: \"10px\" }}\n            /> */}\n          </div>\n        </div>\n\n        <div className=\"ListContent\">\n          {isLoading && treadingContent ? (\n            treadingContent.map((n) => (\n              <SingleData key={n.id} {...n} mediaType=\"tv\" />\n            ))\n          ) : (\n            <div\n              className=\"loading\"\n              style={{\n                display: \"flex\",\n                height: \"450px\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <Myloader color={color} size={60} />\n              <p\n                style={{\n                  color: \"grey\",\n                  fontSize: \"13px\",\n                  marginLeft: \"10px\",\n                  marginTop: \"10px\",\n                }}\n              >\n                fetching data ...\n              </p>\n            </div>\n          )}\n        </div>\n\n        {numOfPages > 1 && (\n          <Pagination\n            setPage={setPage}\n            numOfPages={numOfPages}\n            media=\"series\"\n            page={page}\n            searchTerm={searchTerm}\n            setIsLoading={setIsLoading}\n            style={{ marginBottom: \"10px\" }}\n          />\n        )}\n      </main>\n    </>\n  );\n};\n\nexport default TvSeries;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}